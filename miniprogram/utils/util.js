"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function formatTime(date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':');
}
exports.formatTime = formatTime;
var formatNumber = function (n) {
    var str = n.toString();
    return str[1] ? str : '0' + str;
};
function log(date) {
    console.log(date);
}
exports.log = log;
function showBusy(text) {
    wx.showToast({
        title: text == undefined ? "繁忙" : text,
        icon: 'loading',
        duration: 2000
    });
}
exports.showBusy = showBusy;
function showSuccess(text) {
    wx.showToast({
        title: text == undefined ? "success" : text,
        icon: 'success'
    });
}
exports.showSuccess = showSuccess;
function showModel(title, content) {
    wx.hideToast();
    wx.showModal({
        title: title,
        content: JSON.stringify(content),
        showCancel: false
    });
}
exports.showModel = showModel;
function request(url, param, method) {
    var _this = this;
    wx.showLoading({
        title: "数据加载中...",
        mask: true
    });
    var info;
    wx.request({
        url: "http://127.0.0.1:8081" + url,
        header: {
            'content-type': 'application/x-www-form-urlencoded',
            'token': wx.getStorageSync("token")
        },
        data: param,
        method: method == undefined ? "POST" : "GET",
        success: function (e) {
            setTimeout(function () {
                wx.hideLoading();
            }, 100);
            if (e.data.success === true) {
                e.data = info;
            }
            else {
                _this.showSuccess("fail");
            }
        },
        error: function (e) {
        }
    });
    return info;
}
exports.request = request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFnQixVQUFVLENBQUMsSUFBVTtJQUNuQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDL0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNqQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDMUIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQzVCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNoQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFFaEMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDbEgsQ0FBQztBQVRELGdDQVNDO0FBRUQsSUFBTSxZQUFZLEdBQUcsVUFBQyxDQUFTO0lBQzdCLElBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN4QixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO0FBQ2pDLENBQUMsQ0FBQTtBQUVELFNBQWdCLEdBQUcsQ0FBQyxJQUFZO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUZELGtCQUVDO0FBR0QsU0FBZ0IsUUFBUSxDQUFDLElBQWE7SUFDcEMsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNYLEtBQUssRUFBRSxJQUFJLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDdEMsSUFBSSxFQUFFLFNBQVM7UUFDZixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFORCw0QkFNQztBQUdELFNBQWdCLFdBQVcsQ0FBQyxJQUFhO0lBQ3ZDLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDWCxLQUFLLEVBQUUsSUFBSSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQzNDLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFMRCxrQ0FLQztBQUdELFNBQWdCLFNBQVMsQ0FBQyxLQUFhLEVBQUUsT0FBWTtJQUNuRCxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDZixFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ1gsS0FBSyxPQUFBO1FBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2hDLFVBQVUsRUFBRSxLQUFLO0tBQ2xCLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFQRCw4QkFPQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBVSxFQUFFLE1BQWU7SUFDOUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDYixLQUFLLEVBQUUsVUFBVTtRQUNqQixJQUFJLEVBQUUsSUFBSTtLQUNYLENBQUMsQ0FBQztJQUNILElBQUksSUFBUyxDQUFDO0lBQ2QsRUFBRSxDQUFDLE9BQU8sQ0FBQztRQUNULEdBQUcsRUFBRSx1QkFBdUIsR0FBRyxHQUFHO1FBQ2xDLE1BQU0sRUFBRTtZQUNOLGNBQWMsRUFBRSxtQ0FBbUM7WUFDbkQsT0FBTyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQzVDLE9BQU8sRUFBRSxVQUFDLENBQUM7WUFDVCxVQUFVLENBQUM7Z0JBQ1QsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUMzQixDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNmO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0I7UUFDSCxDQUFDO1FBQ0QsS0FBSyxFQUFFLFVBQVUsQ0FBQztRQUVsQixDQUFDO0tBQ0YsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBOUJELDBCQThCQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUaW1lKGRhdGU6IERhdGUpOiBzdHJpbmcge1xuICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXG4gIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMVxuICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKVxuICBjb25zdCBob3VyID0gZGF0ZS5nZXRIb3VycygpXG4gIGNvbnN0IG1pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpXG4gIGNvbnN0IHNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpXG5cbiAgcmV0dXJuIFt5ZWFyLCBtb250aCwgZGF5XS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCcvJykgKyAnICcgKyBbaG91ciwgbWludXRlLCBzZWNvbmRdLm1hcChmb3JtYXROdW1iZXIpLmpvaW4oJzonKVxufVxuXG5jb25zdCBmb3JtYXROdW1iZXIgPSAobjogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHN0ciA9IG4udG9TdHJpbmcoKVxuICByZXR1cm4gc3RyWzFdID8gc3RyIDogJzAnICsgc3RyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2coZGF0ZTogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnNvbGUubG9nKGRhdGUpO1xufVxuXG4vLyDmmL7npLrnuYHlv5nmj5DnpLpcbmV4cG9ydCBmdW5jdGlvbiBzaG93QnVzeSh0ZXh0Pzogc3RyaW5nKTogdm9pZCB7XG4gIHd4LnNob3dUb2FzdCh7XG4gICAgdGl0bGU6IHRleHQgPT0gdW5kZWZpbmVkID8gXCLnuYHlv5lcIiA6IHRleHQsXG4gICAgaWNvbjogJ2xvYWRpbmcnLFxuICAgIGR1cmF0aW9uOiAyMDAwXG4gIH0pXG59XG5cbi8vIOaYvuekuuaIkOWKn+aPkOekulxuZXhwb3J0IGZ1bmN0aW9uIHNob3dTdWNjZXNzKHRleHQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgd3guc2hvd1RvYXN0KHtcbiAgICB0aXRsZTogdGV4dCA9PSB1bmRlZmluZWQgPyBcInN1Y2Nlc3NcIiA6IHRleHQsXG4gICAgaWNvbjogJ3N1Y2Nlc3MnXG4gIH0pXG59XG5cbi8vIOaYvuekuuWksei0peaPkOekulxuZXhwb3J0IGZ1bmN0aW9uIHNob3dNb2RlbCh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBhbnkpOiB2b2lkIHtcbiAgd3guaGlkZVRvYXN0KCk7XG4gIHd4LnNob3dNb2RhbCh7XG4gICAgdGl0bGUsXG4gICAgY29udGVudDogSlNPTi5zdHJpbmdpZnkoY29udGVudCksXG4gICAgc2hvd0NhbmNlbDogZmFsc2VcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3QodXJsOiBzdHJpbmcsIHBhcmFtOiBhbnksIG1ldGhvZD86IHN0cmluZyk6IGFueSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHd4LnNob3dMb2FkaW5nKHtcbiAgICB0aXRsZTogXCLmlbDmja7liqDovb3kuK0uLi5cIixcbiAgICBtYXNrOiB0cnVlXG4gIH0pO1xuICB2YXIgaW5mbzogYW55O1xuICB3eC5yZXF1ZXN0KHtcbiAgICB1cmw6IFwiaHR0cDovLzEyNy4wLjAuMTo4MDgxXCIgKyB1cmwsXG4gICAgaGVhZGVyOiB7XG4gICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAndG9rZW4nOiB3eC5nZXRTdG9yYWdlU3luYyhcInRva2VuXCIpXG4gICAgfSxcbiAgICBkYXRhOiBwYXJhbSxcbiAgICBtZXRob2Q6IG1ldGhvZCA9PSB1bmRlZmluZWQgPyBcIlBPU1RcIiA6IFwiR0VUXCIsXG4gICAgc3VjY2VzczogKGUpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB3eC5oaWRlTG9hZGluZygpO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlmIChlLmRhdGEuc3VjY2VzcyA9PT0gdHJ1ZSkge1xuICAgICAgICBlLmRhdGEgPSBpbmZvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2hvd1N1Y2Nlc3MoXCJmYWlsXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICB9XG4gIH0pXG4gIHJldHVybiBpbmZvO1xufSJdfQ==